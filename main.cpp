#include <iostream>
#include <limits>
#include "BigNum.h"

//int main(int argc, char* argv[])
int main() {
	BigNum a{ };
	BigNum b{ };

	// addition tests
	std::cout << "Additions:\n";
	a = 12; b = 13;
	std::cout << a << "+" << b << "=" << (a + b) << "\n";
	a = 19; b = 6;
	std::cout << a << "+" << b << "=" << (a + b) << "\n";
	a = 199; b = 199;
	std::cout << a << "+" << b << "=" << (a + b) << "\n";
	a = 12; b = -13;
	std::cout << a << "+" << b << "=" << (a + b) << "\n";
	a = -12; b = 15;
	std::cout << a << "+" << b << "=" << (a + b) << "\n";
	a = -5; b = -10;
	std::cout << a << "+" << b << "=" << (a + b) << "\n";
	a = 357; b = -1999;
	std::cout << a << "+" << b << "=" << (a + b) << "\n";
	a = BigNum{ "1923871989387192837878738729837192837828378388289128391827399999000000009090909912390912380192930" };
	b = BigNum{ "99999999" };
	std::cout << a << "+" << b << "=" << (a + b) << "\n";
	a = BigNum{ "999999999912391230129391293999999999999999" };
	b = BigNum{ "91238102938293829389182309238123091823918293812039819238120398123" };
	std::cout << a << "+" << b << "=" << (a + b) << "\n";
	a = BigNum{ "999999999912391230129391293999999999999999" };
	b = BigNum{ "-91238102938293829389182309238123091823918293812039819238120398123" };
	std::cout << a << "+" << b << "=" << (a + b) << "\n";
	a = BigNum{ "-999999999912391230129391293999999999999999" };
	b = BigNum{ "91238102938293829389182309238123091823918293812039819238120398123" };
	std::cout << a << "+" << b << "=" << (a + b) << "\n";

	// subtraction tests
	std::cout << "Subtractions:\n";

	a = 2355; b = 1998;
	std::cout << a << "-" << b << "=" << (a - b) << "\n";
	a = -5; b = -10;
	std::cout << a << "-" << b << "=" << (a - b) << "\n";
	a = 123; b = 500;
	std::cout << a << "-" << b << "=" << (a - b) << "\n";
	a = 123; b = 5999;
	std::cout << a << "-" << b << "=" << (a - b) << "\n";
	a = BigNum{ "100" };
	b = BigNum{ "100" };
	std::cout << a << "-" << b << "=" << (a - b) << "\n";
	a = BigNum{ "-100" };
	b = BigNum{ "-100" };
	std::cout << a << "-" << b << "=" << (a - b) << "\n";
	a = BigNum{ "918273981238888888888123981723918723918273918273918273918273918273918273" };
	b = BigNum{ "-100" };
	std::cout << a << "-" << b << "=" << (a - b) << "\n";
	a = BigNum{ "918273981238888888888123981723918723918273918273918273918273918273918273" };
	b = BigNum{ "918273981238888888888123981723918723918273918273918273918273918273918273918273981238888888888123981723918723918273918273918273918273918273918273918273981238888888888123981723918723918273918273918273918273918273918273" };
	std::cout << a << "-" << b << "=" << (a - b) << "\n";

	// comparisons
	std::cout << "Comparisons:\n";

	std::cout << "special (should be 1): " << ((a + b - b) == a) << "\n";

	a = BigNum{ "123" };
	b = BigNum{ "123" };
	std::cout << a << " " << b << ":\n";
	std::cout << "a<b: " << (a < b) << "\n";
	std::cout << "a<=b: " << (a <= b) << "\n";
	std::cout << "a==b: " << (a == b) << "\n";
	std::cout << "a>=b: " << (a >= b) << "\n";
	std::cout << "a>b: " << (a > b) << "\n";

	a = BigNum{ "-15" };
	b = BigNum{ "16" };
	std::cout << a << " " << b << ":\n";
	std::cout << "a<b: " << (a < b) << "\n";
	std::cout << "a<=b: " << (a <= b) << "\n";
	std::cout << "a==b: " << (a == b) << "\n";
	std::cout << "a>=b: " << (a >= b) << "\n";
	std::cout << "a>b: " << (a > b) << "\n";

	a = BigNum{ "15" };
	b = BigNum{ "30" };
	std::cout << a << " " << b << ":\n";
	std::cout << "a<b: " << (a < b) << "\n";
	std::cout << "a<=b: " << (a <= b) << "\n";
	std::cout << "a==b: " << (a == b) << "\n";
	std::cout << "a>=b: " << (a >= b) << "\n";
	std::cout << "a>b: " << (a > b) << "\n";

	a = BigNum{ "-990" };
	b = BigNum{ "0" };
	std::cout << a << " " << b << ":\n";
	std::cout << "a<b: " << (a < b) << "\n";
	std::cout << "a<=b: " << (a <= b) << "\n";
	std::cout << "a==b: " << (a == b) << "\n";
	std::cout << "a>=b: " << (a >= b) << "\n";
	std::cout << "a>b: " << (a > b) << "\n";

	a = BigNum{ "0" };
	b = BigNum{ "0" };
	std::cout << a << " " << b << ":\n";
	std::cout << "a<b: " << (a < b) << "\n";
	std::cout << "a<=b: " << (a <= b) << "\n";
	std::cout << "a==b: " << (a == b) << "\n";
	std::cout << "a>=b: " << (a >= b) << "\n";
	std::cout << "a>b: " << (a > b) << "\n";

	a = BigNum{ "-0" };
	b = BigNum{ "0" };
	std::cout << a << " " << b << ":\n";
	std::cout << "a<b: " << (a < b) << "\n";
	std::cout << "a<=b: " << (a <= b) << "\n";
	std::cout << "a==b: " << (a == b) << "\n";
	std::cout << "a>=b: " << (a >= b) << "\n";
	std::cout << "a>b: " << (a > b) << "\n";

	a = BigNum{ "-0" };
	b = BigNum{ "-0" };
	std::cout << a << " " << b << ":\n";
	std::cout << "a<b: " << (a < b) << "\n";
	std::cout << "a<=b: " << (a <= b) << "\n";
	std::cout << "a==b: " << (a == b) << "\n";
	std::cout << "a>=b: " << (a >= b) << "\n";
	std::cout << "a>b: " << (a > b) << "\n";

	// multiplication tests
	std::cout << "Multiplications:\n";
	a = BigNum{ "1" };
	b = BigNum{ "1" };
	std::cout << a << "*" << b << "=" << (a * b) << "\n";
	a = BigNum{ "-1" };
	b = BigNum{ "1" };
	std::cout << a << "*" << b << "=" << (a * b) << "\n";
	a = BigNum{ "-1" };
	b = BigNum{ "-1" };
	std::cout << a << "*" << b << "=" << (a * b) << "\n";
	a = BigNum{ "-1" };
	b = BigNum{ "0" };
	std::cout << a << "*" << b << "=" << (a * b) << "\n";
	a = BigNum{ "0" };
	b = BigNum{ "0" };
	std::cout << a << "*" << b << "=" << (a * b) << "\n";
	a = BigNum{ "1239812379128739182379884384938989999999999999" };
	b = BigNum{ "0" };
	std::cout << a << "*" << b << "=" << (a * b) << "\n";
	a = BigNum{ "1239812379128739182379884384938989999999999999" };
	b = BigNum{ "-0" };
	std::cout << a << "*" << b << "=" << (a * b) << "\n";
	a = BigNum{ "4" };
	b = BigNum{ "4" };
	std::cout << a << "*" << b << "=" << (a * b) << "\n";
	a = BigNum{ "5" };
	b = BigNum{ "25" };
	std::cout << a << "*" << b << "=" << (a * b) << "\n";
	a = BigNum{ "25" };
	b = BigNum{ "5" };
	std::cout << a << "*" << b << "=" << (a * b) << "\n";
	a = BigNum{ "1293817239899999999999999349384792384779238472938472938472938472938472938484384129381723989999999999999934938479238477923847293847293847293847293847293848438412938172398999999999999993493847923847792384729384729384729384729384729384843841293817239899999999999999349384792384779238472938472938472938472938472938484384" };
	b = BigNum{ "44555993849838222129381723989999999999999934938479238477923847293847293847293847293847293848438412938172398999999999999993493847923847792384729384729384729384729384729384843841293817239899999999999999349384792384779238472938472938472938472938472938484384129381723989999999999999934938479238477923847293847293847293847293847293848438412938172398999999999999993493847923847792384729384729384729384729384729384843841293817239899999999999999349384792384779238472938472938472938472938472938484384129381723989999999999999934938479238477923847293847293847293847293847293848438412938172398999999999999993493847923847792384729384729384729384729384729384843841293817239899999999999999349384792384779238472938472938472938472938472938484384129381723989999999999999934938479238477923847293847293847293847293847293848438412938172398999999999999993493847923847792384729384729384729384729384729384843841293817239899999999999999349384792384779238472938472938472938472938472938484384" };
	std::cout << a << "*" << b << "=" << (a * b) << "\n";
	a = BigNum{ "1293817239899999999999999349384792384779238472938472938472938472938472938484384129381723989999999999999934938479238477923847293847293847293847293847293848438412938172398999999999999993493847923847792384729384729384729384729384729384843841293817239899999999999999349384792384779238472938472938472938472938472938484384" };
	b = BigNum{};
	std::cout << "Special (should be 0): " << ((a * b * b) * 0) << "\n";

	// division tests
	/*
	std::cout << "Divisions:\n";
	a = BigNum{ "25" };
	b = BigNum{ "5" };
	std::cout << a << "/" << b << "=" << (a / b) << " with remainder: " << (a % b) << "\n";

	a = BigNum{ "5" };
	b = BigNum{ "1" };
	std::cout << a << "/" << b << "=" << (a / b) << " with remainder: " << (a % b) << "\n";

	a = BigNum{ "5" };
	b = BigNum{ "0" };
	try {
		std::cout << a << "/" << b << "=" << (a / b) << " with remainder: " << (a % b) << "\n";
	}
	catch (std::exception& e) {
		e;
		std::cout << "division by zero.\n";
	}

	a = BigNum{ "5" };
	b = BigNum{ "10" };
	std::cout << a << "/" << b << "=" << (a / b) << " with remainder: " << (a % b) << "\n";

	a = BigNum{ "5123123123123123" };
	b = BigNum{ "1" };
	std::cout << a << "/" << b << "=" << (a / b) << " with remainder: " << (a % b) << "\n";

	a = BigNum{ "51231231231231235123123123123123512312312312312351231231231231235123123123123123" };
	b = BigNum{ "90129" };
	std::cout << a << "/" << b << "=" << (a / b) << " with remainder: " << (a % b) << "\n";

	a = BigNum{ "98123791283719238719283719283719238719283712983719283712983712983779812379128371923871928371928371923871928371298371928371298371298377981237912837192387192837192837192387192837129837192837129837129837798123791283719238719283719283719238719283712983719283712983712983779812379128371923871928371928371923871928371298371928371298371298377" };
	b = BigNum{ "981237912837192387192837192837192387192837129837192837129837129837798123791283719238719283719283719238719283712983719283712983712983779812379128371923871928371928371923871928371298371928371298371298377981237912837192387192837192837192387192837129837192837129837129837" };
	std::cout << a << "/" << b << "=" << (a / b) << " with remainder: " << (a % b) << "\n";

	a = BigNum{ "98123791283719238719283719283719238719283712983719283712983712983779812379128371923871928371928371923871928371298371928371298371298377981237912837192387192837192837192387192837129837192837129837129837798123791283719238719283719283719238719283712983719283712983712983779812379128371923871928371928371923871928371298371928371298371298377" };
	b = BigNum{};
	std::cout << a << "/" << b << "=" << (a / b) << " with remainder: " << (a % b) << "\n";
	*/

	// String constructors
	std::vector<std::string> good{ "123", "+123", "-123", "+0000", "-0", "-00000", "0000000", "+000123", "000123", "-000123", "+0", "0" };
	std::vector<std::string> bad{ "++123", "--123", "123.", "+123w", "-w123", "+1w23", "1w23", "-1w23", "000-123", "000+123", "+00w00", "-00w00" };

	std::cout << "String constructors (should pass)\n";
	for (auto& s : good) {
		a = BigNum{ s };
		std::cout << "\t" << s << " -> " << a << "\n";
	}
	std::cout << "String constructors (should throw exception)\n";
	for (auto& s : bad) {
		try {
			a = BigNum{ s };
			std::cout << "\t" << s << " -> " << a << " !!! THIS SHOULDN'T HAVE HAPPENED !!!\n";
		}
		catch (std::exception& e) {
			e;
			std::cout << "\t" << s << " threw exception\n";
		}
	}

	// other constructors
	std::cout << "Default + integer constructors:\n";
	a = BigNum{};
	std::cout << a << "\n";
	a = BigNum{ 555 };
	std::cout << a << "\n";
	a = BigNum{ -555 };
	std::cout << a << "\n";
	a = BigNum{ 0 };
	std::cout << a << "\n";
	a = BigNum{ -0 };
	std::cout << a << "\n";

	constexpr int64_t x = std::numeric_limits<int64_t>::max();
	a = BigNum{ x };
	std::cout << a << "\n";
	std::cout << a + 1 << "\n";
	a = BigNum{ -x };
	std::cout << a << "\n";
	std::cout << a - 1 << "\n";

	// assigning mathematical operators
	std::cout << "Assigning math operators:\n";

	// addition
	a = BigNum{ "10" };
	b = BigNum{ "20" };
	std::cout << a << "+=" << b << "=>\t a = ";
	a += b;
	std::cout << a << "\n";

	a = BigNum{ "10" };
	b = BigNum{ "-20" };
	std::cout << a << "+=" << b << "=>\t a = ";
	a += b;
	std::cout << a << "\n";

	a = BigNum{ "-1000" };
	b = BigNum{ "-2000" };
	std::cout << a << "+=" << b << "=>\t a = ";
	a += b;
	std::cout << a << "\n";

	a = BigNum{ "-1000" };
	b = BigNum{ "9999" };
	std::cout << a << "+=" << b << "=>\t a = ";
	a += b;
	std::cout << a << "\n";

	a = BigNum{ "-1" };
	b = BigNum{ "1" };
	std::cout << a << "+=" << b << "=>\t a = ";
	a += b;
	std::cout << a << "\n";

	a = BigNum{ "-1" };
	b = BigNum{ "0" };
	std::cout << a << "+=" << b << "=>\t a = ";
	a += b;
	std::cout << a << "\n";

	// subtraction
	a = BigNum{ "1000" };
	b = BigNum{ "500" };
	std::cout << a << "-=" << b << "=>\t a = ";
	a -= b;
	std::cout << a << "\n";

	a = BigNum{ "20" };
	b = BigNum{ "200" };
	std::cout << a << "-=" << b << "=>\t a = ";
	a -= b;
	std::cout << a << "\n";

	a = BigNum{ "20" };
	b = BigNum{ "-20" };
	std::cout << a << "-=" << b << "=>\t a = ";
	a -= b;
	std::cout << a << "\n";

	a = BigNum{ "20" };
	b = BigNum{ "0" };
	std::cout << a << "-=" << b << "=>\t a = ";
	a -= b;
	std::cout << a << "\n";

	a = BigNum{ "20" };
	b = BigNum{ "20" };
	std::cout << a << "-=" << b << "=>\t a = ";
	a -= b;
	std::cout << a << "\n";

	// multiplication
	a = BigNum{ "20" };
	b = BigNum{ "20" };
	std::cout << a << "*=" << b << "=>\t a = ";
	a *= b;
	std::cout << a << "\n";

	a = BigNum{ "1" };
	b = BigNum{ "1" };
	std::cout << a << "*=" << b << "=>\t a = ";
	a *= b;
	std::cout << a << "\n";

	a = BigNum{ "1" };
	b = BigNum{ "-1" };
	std::cout << a << "*=" << b << "=>\t a = ";
	a *= b;
	std::cout << a << "\n";

	a = BigNum{ "-1" };
	b = BigNum{ "-1" };
	std::cout << a << "*=" << b << "=>\t a = ";
	a *= b;
	std::cout << a << "\n";

	a = BigNum{ "-100" };
	b = BigNum{ "2" };
	std::cout << a << "*=" << b << "=>\t a = ";
	a *= b;
	std::cout << a << "\n";

	a = BigNum{ "-100" };
	b = BigNum{ "0" };
	std::cout << a << "*=" << b << "=>\t a = ";
	a *= b;
	std::cout << a << "\n";

	a = BigNum{ "-1012398123791823791823791827391823791823883289182379128370" };
	b = BigNum{ "0" };
	std::cout << a << "*=" << b << "=>\t a = ";
	a *= b;
	std::cout << a << "\n";

	a = BigNum{ "0" };
	b = BigNum{ "39284798374" };
	std::cout << a << "*=" << b << "=>\t a = ";
	a *= b;
	std::cout << a << "\n";

	// division
	/*
	a = BigNum{ "0" };
	b = BigNum{ "4" };
	std::cout << a << "/=" << b << "=>\t a = ";
	a /= b;
	std::cout << a << "\n";

	a = BigNum{ "20" };
	b = BigNum{ "4" };
	std::cout << a << "/=" << b << "=>\t a = ";
	a /= b;
	std::cout << a << "\n";

	a = BigNum{ "77" };
	b = BigNum{ "4" };
	std::cout << a << "/=" << b << "=>\t a = ";
	a /= b;
	std::cout << a << "\n";

	try {
		a = BigNum{ "77" };
		b = BigNum{ "0" };
		std::cout << a << "/=" << b << "=>\t a = ";
		a /= b;
		std::cout << a << "\n";
	}
	catch (std::exception& e) {
		e;
		std::cout << "Division by zero.\n";
	}

	a = BigNum{ "12308127938" };
	b = BigNum{ "1" };
	std::cout << a << "/=" << b << "=>\t a = ";
	a /= b;
	std::cout << a << "\n";

	a = BigNum{ "12308127938" };
	b = BigNum{ "12308127938" };
	std::cout << a << "/=" << b << "=>\t a = ";
	a /= b;
	std::cout << a << "\n";

	// modulo
	a = BigNum{ "20" };
	b = BigNum{ "7" };
	std::cout << a << "%=" << b << "=>\t a = ";
	a %= b;
	std::cout << a << "\n";

	a = BigNum{ "20" };
	b = BigNum{ "5" };
	std::cout << a << "%=" << b << "=>\t a = ";
	a %= b;
	std::cout << a << "\n";

	a = BigNum{ "20" };
	b = BigNum{ "1" };
	std::cout << a << "%=" << b << "=>\t a = ";
	a %= b;
	std::cout << a << "\n";

	a = BigNum{ "349082739488" };
	b = BigNum{ "349082739488" };
	std::cout << a << "%=" << b << "=>\t a = ";
	a %= b;
	std::cout << a << "\n";
	*/

	return 0;
}
